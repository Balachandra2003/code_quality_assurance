name: C++, Python, Rust, and Java Code Quality Checks

on:
  push:
    branches:
      - main
      - feature/**
  pull_request:

jobs:
  lint-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ---------------- C++ ----------------
      - name: Install cpplint
        run: pip install cpplint

      - name: Install cppcheck
        run: sudo apt-get update && sudo apt-get install -y cppcheck

      - name: Run cpplint on .cpp files
        run: |
          echo "üîç Running cpplint..."
          files=$(find . -name "*.cpp")
          if [ -z "$files" ]; then
            echo "‚úÖ No .cpp files found."
          else
            cpplint $files
          fi

      - name: Run cppcheck on .cpp files
        run: |
          echo "üîç Running cppcheck..."
          files=$(find . -name "*.cpp")
          if [ -z "$files" ]; then
            echo "‚úÖ No .cpp file found."
          else
            cppcheck --std=c++17 --enable=all --suppress=missingIncludeSystem --error-exitcode=1 $files
          fi
      # ---------------- Gtest ----------------
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y g++ cmake make libgtest-dev

      - name: Clean old CMake cache
        run: |
          rm -rf cpp/googletest/build
          rm -f cpp/googletest/CMakeCache.txt

      - name: Build GoogleTest
        run: |
          cd cpp
          rm -rf googletest
          git clone https://github.com/google/googletest.git
          cd googletest
          mkdir build && cd build
          cmake .. -DCMAKE_CXX_STANDARD=17
          make -j$(nproc)

      - name: Compile and link ChatSentiment tests
        run: |
          cd cpp
          g++ -std=c++17 \
            -I/usr/include \
            chat_logic.cpp test_chat_sentiment.cpp \
            -lgtest -lgtest_main -pthread -o runChatTests

      - name: Run ChatSentiment tests
        run: |
          cd cpp
          ./runChatTests

      - name: Compile and link BankApp tests
        run: |
          cd cpp
          g++ -std=c++17 \
            -I/usr/include \
            bank_app.cpp test_bankapp.cpp \
            -lgtest -lgtest_main -pthread -o runBankTests

      - name: Run BankApp tests
        run: |
          cd cpp
          ./runBankTests

      # ---------------- Python ----------------
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install pylint and flake8
        run: pip install pylint flake8

      - name: Run pylint on Python files
        run: |
          echo "üîç Running pylint..."
          files=$(find . -name "*.py")
          if [ -z "$files" ]; then
            echo "No Python files found."
          else
            pylint $files
          fi

      - name: Run flake8 on Python files
        run: |
          echo "üîç Running flake8..."
          files=$(find . -name "*.py")
          if [ -z "$files" ]; then
            echo "No Python files found."
          else
            flake8 $files
          fi

      # ---------------- Rust ----------------
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install clippy and rustfmt
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Run cargo clippy
        run: |
          echo "üîç Running cargo clippy..."
          cd rust
          cargo clippy -- -D warnings

      - name: Run cargo fmt
        run: |
          echo "üîç Running cargo fmt..."
          cd rust
          cargo fmt -- --check

      # ---------------- Java ----------------
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Maven (skip tests)
        working-directory: java
        run: mvn -B compile -DskipTests=true

      - name: Run Checkstyle
        working-directory: java
        run: |
          echo "üîç Running Checkstyle..."
          set +e
          mvn -B checkstyle:check
          STATUS=$?
          if [ $STATUS -ne 0 ]; then
            echo "::error::‚ùå Checkstyle found issues. See log above."
            exit 1
          else
            echo "‚úÖ No Checkstyle violations."
          fi

      - name: Run PMD
        working-directory: java
        run: |
          echo "üîç Running PMD..."
          set +e
          mvn -B pmd:check -Dpmd.verbose=true
          STATUS=$?
          if [ $STATUS -ne 0 ]; then
            echo "::error::‚ùå PMD found violations. See details above."
            exit 1
          else
            echo "‚úÖ No PMD violations."
          fi
